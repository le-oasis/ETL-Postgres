version: '3'
x-airflow-common:
  &airflow-common
  build:
    context: ./docker/airflow-setup
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__MAX_ACTIVE_RUNS_PER_DAG: '1'
    AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: '20'
    AIRFLOW__CORE__PARALLELISM: '96'
    AIRFLOW__CELERY__WORKER_CONCURRENCY: '32'
    AIRFLOW_HOME: '/opt/airflow'
    AIRFLOW__SCHEDULER__HEARTBEAT_SEC: '60'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__LOGGING__REMOTE_LOGGING: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./src/Airflow/dags:/opt/airflow/dags
    - ./src/Airflow/logs:/opt/airflow/logs
    - ./src/Airflow/plugins:/opt/airflow/plugins
    - ./spark/app:/usr/local/spark/app 
    - ./spark/resources:/usr/local/spark/resources 
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - oasiscorp

services:

  # Postgres
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:14.1-alpine
    env_file:
      - .env
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - oasiscorp

  # Jupyter notebook
  jupyter-spark:
        hostname: myjupyter
        container_name: jupyter_container
        image: 'jupyter/pyspark-notebook:spark-3.2.0'
        networks:
            - oasiscorp
        ports:
          - "8888:8888"
        volumes:
          - ./notebooks:/home/jovyan/work/notebooks/
          - ./spark/resources/data:/home/jovyan/work/data/
          - ./spark/resources/jars:/home/jovyan/work/jars/
        restart: always
        depends_on:
                - postgres

  # Spark Master with 3 workers.
  spark-master:
    image: 'bde2020/spark-master:3.2.0-hadoop3.2'
    container_name: spark-master
    hostname: spark-master
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
      - ./spark/app:/usr/local/spark/app
      - ./spark/resources:/usr/local/spark/resources
    ports:
       - "8181:8080"
       - "7077:7077"
    networks:
      - oasiscorp

  # Spark Worker-1
  spark-worker-1:
    image: 'bde2020/spark-worker:3.2.0-hadoop3.2'
    container_name: spark-worker-1
    depends_on: 
      - spark-master
    ports:
      - "8081:8081"
    env_file:
      - .env
    volumes:
      - ./spark/app:/usr/local/spark/app 
      - ./spark/resources:/usr/local/spark/resources
    networks:
      - oasiscorp 

  # Spark Worker-2
  spark-worker-2:
    image: 'bde2020/spark-worker:3.2.0-hadoop3.2'
    container_name: spark-worker-2
    ports:
      - "8083:8081"
    depends_on: 
      - spark-master
    env_file:
      - .env
    volumes:
      - ./spark/app:/usr/local/spark/app
      - ./spark/resources:/usr/local/spark/resources
    networks:
      - oasiscorp


  # Redis
  redis:
      container_name: redis
      image: 'redis:latest'
      expose:
        - 6379
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 30s
        retries: 50
      restart: always
      networks:
        - oasiscorp

  # Airflow Web UI
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: webserver
    ports:
        - 8085:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8085/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    links:
      - postgres

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: scheduler
    restart: always

  # Airflow Worker 
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: celery-worker
    restart: always

  # Airflow DB
  airflow-init:
    <<: *airflow-common
    command: version
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  elasticsearch:
    build:
      context: src/Elasticsearch
      args:
        ES_KIBANA_VERSION: $ES_KIBANA_VERSION
    volumes:
      - ./src/Elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
#     - ./Elasticsearch/data:/usr/share/Elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      cluster.name: docker-cluster
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: "-Xmx1g -Xms1g"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - oasiscorp

  logstash:
    build:
      context: src/Logstash
      args:
        LOGSTASH_VERSION: $LOGSTASH_VERSION
    volumes:
      - ./src/Logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,z
      - ./src/Logstash/pipeline:/usr/share/logstash/pipeline:ro,z
    ports:
      - "5044:5044"
      - "6000:6000/tcp"
      - "6000:6000/udp"
      - "9600:9600"
    env_file:
      - .env
    environment:
      LS_JAVA_OPTS: "-Xmx2048m -Xms2048m"
    depends_on:
      - elasticsearch
      - postgres
      - kibana
    networks:
      - oasiscorp
    links:
      - postgres
      - elasticsearch

  kibana:
    build:
      context: src/Kibana
      args:
        ES_KIBANA_VERSION: $ES_KIBANA_VERSION
    volumes:
      - ./src/Kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - oasiscorp

networks:
  oasiscorp:
    driver: bridge

volumes:
  postgres-volume:
  elasticsearch:
  logstash:
  kibana:
  airflow-webserver:
